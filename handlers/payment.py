from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from telegram.ext import ContextTypes
import logging

import config
from database import get_user
from services import payment_service

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ Telegram –ø–ª–∞—Ç–µ–∂–∏
TELEGRAM_PAYMENTS_AVAILABLE = hasattr(config, 'TELEGRAM_PROVIDER_TOKEN') and bool(config.TELEGRAM_PROVIDER_TOKEN)

async def buy_tokens_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ú–∞–π–Ω–¥—Ç–æ–∫–µ–Ω—ã'"""
    query = update.callback_query
    await query.answer()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
    keyboard = []
    for tariff_key, tariff_data in config.TARIFFS.items():
        button_text = f"{tariff_data['description']} - {tariff_data['price']} ‚ÇΩ"
        if tariff_key == 'unlimited':
            button_text = f"üí´ {button_text} (–±–µ–∑–ª–∏–º–∏—Ç)"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"select_tariff:{tariff_key}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ú–∞–π–Ω–¥—Ç–æ–∫–µ–Ω–æ–≤:",
        reply_markup=reply_markup
    )

async def select_tariff_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏–∑ callback_data
    callback_data = query.data
    tariff = callback_data.split(':')[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
    if tariff not in config.TARIFFS:
        await query.edit_message_text(
            text="‚ö†Ô∏è –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–∞
    tariff_data = config.TARIFFS[tariff]
    amount = tariff_data['price']
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram –ø–ª–∞—Ç–µ–∂–∞
    payment_result, payment = await payment_service.create_payment_link(user_id, tariff)
    
    if not payment_result:
        await query.edit_message_text(
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
    if tariff == 'unlimited':
        description = "–±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤"
    else:
        tokens = tariff_data['tokens']
        questions = tokens // config.TOKENS_PER_MESSAGE
        description = f"{tokens} –ú–∞–π–Ω–¥—Ç–æ–∫–µ–Ω–æ–≤ ({questions} –≤–æ–ø—Ä–æ—Å–æ–≤)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ Telegram Payments
    if TELEGRAM_PAYMENTS_AVAILABLE and payment_result.startswith("tariff:"):
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram –ø–ª–∞—Ç–µ–∂–∞
        parts = payment_result.split(":")
        selected_tariff = parts[1]
        payment_id = parts[3]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if not context.user_data.get('payment_info'):
            context.user_data['payment_info'] = {}
        
        context.user_data['payment_info'][payment_id] = {
            'tariff': selected_tariff,
            'payment_id': payment_id,
            'amount': amount
        }
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ API Telegram
        await show_payment_invoice(update, context, selected_tariff, payment_id)
    else:
        # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_result)],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{payment.payment_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="buy_tokens")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=(
                f"üîπ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {description}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {tariff_data['price']} ‚ÇΩ\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ¬ª –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —Å–∞–π—Ç–µ.\n"
                "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª."
            ),
            reply_markup=reply_markup
        )

async def show_payment_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE, tariff: str, payment_id: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Ñ–æ—Ä–º—É Telegram"""
    query = update.callback_query
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
    if tariff not in config.TARIFFS:
        await query.edit_message_text("‚ö†Ô∏è –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–∞
    tariff_data = config.TARIFFS[tariff]
    amount = tariff_data['price'] * 100  # –í –∫–æ–ø–µ–π–∫–∞—Ö
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    if tariff == 'unlimited':
        title = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"
        description = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É"
    else:
        tokens = tariff_data['tokens']
        questions = tokens // config.TOKENS_PER_MESSAGE
        title = f"–¢–∞—Ä–∏—Ñ: {tariff_data['description']}"
        description = f"{tokens} –ú–∞–π–Ω–¥—Ç–æ–∫–µ–Ω–æ–≤ ({questions} –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É)"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    prices = [LabeledPrice("–ú–∞–π–Ω–¥—Ç–æ–∫–µ–Ω—ã", amount)]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    provider_token = config.TELEGRAM_PROVIDER_TOKEN.strip()
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger = logging.getLogger(__name__)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {provider_token[:4]}...{provider_token[-4:]}")
        logger.info(f"Chat ID: {chat_id}, Title: {title}, Amount: {amount}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await context.bot.send_invoice(
            chat_id=chat_id,
            title=title,
            description=description,
            payload=f"payment:{payment_id}:{tariff}",
            provider_token=provider_token,
            currency="RUB",
            prices=prices,
            start_parameter=f"payment_{payment_id}",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω–≤–æ–π—Å–∞
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="buy_tokens")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="üì≤ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
            reply_markup=reply_markup
        )
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: {str(e)}")
        
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="buy_tokens")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=reply_markup
        )

async def check_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ÆKassa)"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ callback_data
    callback_data = query.data
    payment_id = callback_data.split(':')[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    status = await payment_service.check_payment_status(payment_id)
    
    if status == 'succeeded':
        # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω
        user = await get_user(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        if user.is_unlimited:
            message = (
                "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
                "üí´ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. "
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤!"
            )
        else:
            message = (
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
                f"üíé –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.tokens} –ú–∞–π–Ω–¥—Ç–æ–∫–µ–Ω–æ–≤."
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥
        keyboard = [
            [InlineKeyboardButton("üí¨ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∏–∞–ª–æ–≥—É", callback_data="start_chat")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=message,
            reply_markup=reply_markup
        )
    elif status == 'pending':
        # –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await query.edit_message_text(
            text=(
                "‚è≥ –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª —Å–Ω–æ–≤–∞."
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{payment_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="buy_tokens")]
            ])
        )
    else:
        # –ü–ª–∞—Ç–µ–∂ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
        await query.edit_message_text(
            text=(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="buy_tokens")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )

async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram pre-checkout –∑–∞–ø—Ä–æ—Å–∞"""
    query = update.pre_checkout_query
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ payload
    payload = query.invoice_payload
    parts = payload.split(':')
    
    if len(parts) >= 3 and parts[0] == 'payment':
        payment_id = parts[1]
        tariff = parts[2]
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º pre-checkout
        await query.answer(ok=True)
    else:
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Payments"""
    payment = update.message.successful_payment
    user_id = update.effective_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ payload
    payload = payment.invoice_payload
    parts = payload.split(':')
    
    if len(parts) >= 3 and parts[0] == 'payment':
        payment_id = parts[1]
        tariff = parts[2]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        success = await payment_service.process_successful_payment(
            user_id=user_id, 
            telegram_payment_id=payment.telegram_payment_charge_id,
            tariff=tariff
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        if user.is_unlimited:
            message = (
                "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
                "üí´ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. "
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤!"
            )
        else:
            message = (
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
                f"üíé –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.tokens} –ú–∞–π–Ω–¥—Ç–æ–∫–µ–Ω–æ–≤."
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥
        keyboard = [
            [InlineKeyboardButton("üí¨ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∏–∞–ª–æ–≥—É", callback_data="start_chat")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text=message,
            reply_markup=reply_markup
        )
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        await update.message.reply_text(
            text=(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        )

async def back_to_main_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    query = update.callback_query
    await query.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
    from handlers.start import show_main_menu
    await show_main_menu(update, context, show_description=False) 