from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
import json
from datetime import datetime, timedelta
import logging

import config
from database import get_user, add_tokens, set_unlimited_status, get_bot_statistics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if user_id not in config.ADMIN_IDS:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
        )
        return
    
    # –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üéÅ –í—ã–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="admin_give_tokens")],
        [InlineKeyboardButton("‚≠ê –í—ã–¥–∞—Ç—å –±–µ–∑–ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="admin_give_unlimited")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text="üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=reply_markup
    )

async def admin_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in config.ADMIN_IDS:
        await query.edit_message_text(
            text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        stats = await get_bot_statistics()
        
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
            f"üí∞ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {stats['total_payments']}\n"
            f"üí∏ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']} ‚ÇΩ\n\n"
            f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n"
            f"üë§ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['new_users_24h']}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_24h']}\n"
            f"üí∞ –ü–ª–∞—Ç–µ–∂–µ–π: {stats['payments_24h']}\n"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        stats_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞."
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=stats_text,
        reply_markup=reply_markup
    )

async def admin_give_tokens_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–∞—á–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in config.ADMIN_IDS:
        await query.edit_message_text(
            text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['admin_state'] = 'waiting_user_id_for_tokens'
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=(
            "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã.\n\n"
            "–§–æ—Ä–º–∞—Ç: /user_id –ö–û–õ–ò–ß–ï–°–¢–í–û_–¢–û–ö–ï–ù–û–í\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /user_id 123456789 100"
        ),
        reply_markup=reply_markup
    )

async def admin_give_unlimited_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–∞—á–∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in config.ADMIN_IDS:
        await query.edit_message_text(
            text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['admin_state'] = 'waiting_user_id_for_unlimited'
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=(
            "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.\n\n"
            "–§–æ—Ä–º–∞—Ç: /unlimited –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨_ID 1/0\n"
            "1 - –≤–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç, 0 - –≤—ã–∫–ª—é—á–∏—Ç—å\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /unlimited 123456789 1"
        ),
        reply_markup=reply_markup
    )

async def admin_back_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    if 'admin_state' in context.user_data:
        del context.user_data['admin_state']
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    await admin_command(update, context)

async def handle_admin_commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = update.message
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if user_id not in config.ADMIN_IDS:
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã–¥–∞—á–∏ —Ç–æ–∫–µ–Ω–æ–≤
    if text.startswith('/user_id'):
        try:
            parts = text.split()
            target_user_id = int(parts[1])
            tokens_amount = int(parts[2])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await get_user(target_user_id)
            if not user:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                return
            
            # –í—ã–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
            updated_user = await add_tokens(target_user_id, tokens_amount)
            
            await context.bot.send_message(
                chat_id=chat_id,
                text=(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –≤—ã–¥–∞–Ω–æ {tokens_amount} –ú–∞–π–Ω–¥—Ç–æ–∫–µ–Ω–æ–≤.\n"
                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {updated_user.tokens} –ú–∞–π–Ω–¥—Ç–æ–∫–µ–Ω–æ–≤."
                )
            )
        except (ValueError, IndexError):
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /user_id ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ö–û–õ–ò–ß–ï–°–¢–í–û_–¢–û–ö–ï–ù–û–í"
            )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã–¥–∞—á–∏ –±–µ–∑–ª–∏–º–∏—Ç–∞
    elif text.startswith('/unlimited'):
        try:
            parts = text.split()
            target_user_id = int(parts[1])
            is_unlimited = int(parts[2]) == 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await get_user(target_user_id)
            if not user:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑–ª–∏–º–∏—Ç–∞
            await set_unlimited_status(target_user_id, is_unlimited)
            
            status_text = "–≤–∫–ª—é—á–µ–Ω" if is_unlimited else "–≤—ã–∫–ª—é—á–µ–Ω"
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ {status_text}."
            )
        except (ValueError, IndexError):
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unlimited ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 1/0"
            )