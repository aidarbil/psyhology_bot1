import uuid
import logging
import traceback
import json
import sys
from typing import Dict, Optional, Tuple
from datetime import datetime

try:
    import yookassa
    from yookassa import Configuration, Payment as YooKassaPayment
    from yookassa.domain.exceptions import ApiError, BadRequestError, AuthorizationError
    YOOKASSA_AVAILABLE = True
except ImportError as e:
    YOOKASSA_AVAILABLE = False
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ YooKassa: {str(e)}")

import config
from database.models import Payment
from database import create_payment, update_payment_status, add_tokens, set_unlimited_status

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
handler = logging.StreamHandler(sys.stdout)
handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)

# –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ YooKassa
YOOKASSA_INITIALIZED = False

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏ Python –∏ –º–æ–¥—É–ª—è—Ö
logger.info(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
logger.info(f"YooKassa –¥–æ—Å—Ç—É–ø–Ω–∞: {YOOKASSA_AVAILABLE}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ÆKassa —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if YOOKASSA_AVAILABLE:
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        shop_id = config.YUKASSA_SHOP_ID
        secret_key = config.YUKASSA_SECRET_KEY
        
        if not shop_id or not secret_key:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ YUKASSA_SHOP_ID –∏–ª–∏ YUKASSA_SECRET_KEY")
            logger.error(f"YUKASSA_SHOP_ID: {shop_id}")
            logger.error(f"YUKASSA_SECRET_KEY: {'–ó–∞–¥–∞–Ω' if secret_key else '–ù–µ –∑–∞–¥–∞–Ω'}")
            YOOKASSA_INITIALIZED = False
        else:
            # –Ø–≤–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            yookassa.Configuration.account_id = shop_id
            yookassa.Configuration.secret_key = secret_key
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            logger.info(f"‚úÖ –ÆKassa –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å ID –º–∞–≥–∞–∑–∏–Ω–∞: {shop_id}")
            logger.info(f"‚úÖ –ö–ª—é—á: {secret_key[:4]}...{secret_key[-4:] if len(secret_key) > 8 else ''}")
            logger.info(f"‚úÖ Configuration.account_id: {yookassa.Configuration.account_id}")
            YOOKASSA_INITIALIZED = True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ÆKassa: {str(e)}")
        logger.error(traceback.format_exc())
        YOOKASSA_INITIALIZED = False
else:
    logger.error("‚ùå YooKassa –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pip install yookassa==3.0.0")
    YOOKASSA_INITIALIZED = False

# URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
RETURN_URL = config.YUKASSA_RETURN_URL or "https://t.me/psychologybilalov_bot"

class PaymentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ÆKassa (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)"""
    
    @staticmethod
    async def create_payment_link(user_id: int, tariff: str) -> Tuple[Optional[str], Optional[Payment]]:
        """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞"""
        if not YOOKASSA_AVAILABLE:
            logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ YooKassa –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return None, None
            
        if not YOOKASSA_INITIALIZED:
            logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: YooKassa –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return None, None
            
        if tariff not in config.TARIFFS:
            logger.error(f"‚ùå –¢–∞—Ä–∏—Ñ {tariff} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã: {list(config.TARIFFS.keys())}")
            return None, None
        
        tariff_data = config.TARIFFS[tariff]
        amount = tariff_data['price']
        tokens = tariff_data['tokens']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞
        if not isinstance(amount, (int, float)) or amount <= 0:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {amount}")
            return None, None
        
        idempotence_key = str(uuid.uuid4())
        payment_data = {
            "amount": {
                "value": float(amount),  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ float
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": RETURN_URL
            },
            "capture": True,
            "description": f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ '{tariff}' ({tariff_data['description']})"
        }
        
        logger.info(f"üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {json.dumps(payment_data, ensure_ascii=False)}")
        
        try:
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∞—Ä–∏—Ñ: {tariff}")
            
            # –ü–æ–¥—Ä–æ–±–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º —à–∞–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîë –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –∫–ª—é—á: {idempotence_key}")
            logger.info(f"üè™ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –ÆKassa: {yookassa.Configuration.account_id}")
            logger.info(f"üîí –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): {yookassa.Configuration.secret_key[:4]}...{yookassa.Configuration.secret_key[-4:] if len(yookassa.Configuration.secret_key) > 8 else ''}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É yookassa
            response = yookassa.Payment.create(payment_data, idempotence_key)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ÆKassa: {response.json()}")
            logger.info(f"‚úÖ ID –ø–ª–∞—Ç–µ–∂–∞: {response.id}, –°—Ç–∞—Ç—É—Å: {response.status}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É
            payment = Payment(
                payment_id=response.id,
                user_id=user_id,
                tariff=tariff,
                amount=amount,
                tokens=tokens,
                status='pending',
                created_at=datetime.now().isoformat()
            )
            await create_payment(payment)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {response.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.info(f"üîó URL –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {response.confirmation.confirmation_url}")
            
            return response.confirmation.confirmation_url, payment
        except BadRequestError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ YooKassa (–Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã): {str(e)}")
            logger.error(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.error_code}, –æ–ø–∏—Å–∞–Ω–∏–µ: {e.description}")
            logger.error(traceback.format_exc())
            return None, None
        except AuthorizationError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ YooKassa: {str(e)}")
            logger.error(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å shopId –∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.")
            logger.error(traceback.format_exc())
            return None, None
        except ApiError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API YooKassa: {str(e)}")
            logger.error(traceback.format_exc())
            return None, None
        except Exception as e:
            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(traceback.format_exc())
            return None, None
    
    @staticmethod
    async def process_payment_notification(payment_data: Dict) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ÆKassa"""
        if not YOOKASSA_AVAILABLE:
            logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ YooKassa –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return False
            
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ÆKassa: {json.dumps(payment_data, ensure_ascii=False)}")
        
        payment_id = payment_data.get('object', {}).get('id')
        status = payment_data.get('object', {}).get('status')
        
        if not payment_id or not status:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ")
            logger.warning(f"üìã –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {json.dumps(payment_data, ensure_ascii=False)}")
            return False
        
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ {payment_id}, —Å—Ç–∞—Ç—É—Å: {status}")
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ
            payment = await update_payment_status(payment_id, status)
            
            if not payment:
                logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            logger.info(f"üìä –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment.user_id}, —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status}")
            
            if status == 'succeeded':
                # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–π, –Ω–∞—á–∏—Å–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if payment.tokens == -1:  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
                    logger.info(f"üéâ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {payment.user_id}")
                    await set_unlimited_status(payment.user_id, True)
                else:
                    logger.info(f"üéâ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ {payment.tokens} —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {payment.user_id}")
                    await add_tokens(payment.user_id, payment.tokens)
                return True
            
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {str(e)}")
            logger.error(traceback.format_exc())
            return False
    
    @staticmethod
    async def check_payment_status(payment_id: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
        if not YOOKASSA_AVAILABLE:
            logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ YooKassa –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return None
            
        if not YOOKASSA_INITIALIZED:
            logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: YooKassa –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return None
            
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
            response = yookassa.Payment.find_one(payment_id)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {response.status}")
            return response.status
        except BadRequestError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ YooKassa (–Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞): {str(e)}")
            logger.error(traceback.format_exc())
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {str(e)}")
            logger.error(traceback.format_exc())
            return None

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
payment_service = PaymentService() 