import uuid
import logging
import time
from typing import Dict, Optional, Any, Tuple
from datetime import datetime, timedelta

from config import TARIFFS, BOT_USERNAME
from database.models import Payment
from database import create_payment, update_payment_status, add_tokens, set_unlimited_status, get_payment

logger = logging.getLogger(__name__)

class FreePaymentService:
    """
    –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ YooKassa –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
    –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º–∏.
    """
    
    def __init__(self):
        self.payments = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
    
    async def create_payment_link(self, user_id: int, tariff: str) -> Tuple[Optional[str], Optional[Payment]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞.
        –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∏ —Å—Ä–∞–∑—É –Ω–∞—á–∏—Å–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tariff: ID —Ç–∞—Ä–∏—Ñ–∞
            
        Returns:
            Tuple[str, Payment]: URL –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞
        """
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∞—Ä–∏—Ñ: {tariff}")
        
        if tariff not in TARIFFS:
            logger.error(f"‚ùå –¢–∞—Ä–∏—Ñ {tariff} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã: {list(TARIFFS.keys())}")
            return None, None
        
        tariff_data = TARIFFS[tariff]
        amount = tariff_data['price']
        tokens = tariff_data['tokens']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
        payment_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞
        payment = Payment(
            payment_id=payment_id,
            user_id=user_id,
            tariff=tariff,
            amount=amount,
            tokens=tokens,
            status='pending'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await create_payment(payment)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—á–∏–π URL —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤ Telegram
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Telegram
        payment_url = f"https://t.me/{BOT_USERNAME}?start=payment_{payment_id}"
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üîó URL –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {payment_url}")
        
        return payment_url, payment
    
    async def create_payment(self, amount: float, description: str) -> Tuple[str, str]:
        """
        –°–æ–∑–¥–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ URL –æ–ø–ª–∞—Ç—ã.
        –í —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º.
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            Tuple[str, str]: ID –ø–ª–∞—Ç–µ–∂–∞ –∏ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        """
        payment_id = f"free_payment_{len(self.payments) + 1}"
        confirmation_url = f"https://free-payment.example.com/{payment_id}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        self.payments[payment_id] = {
            "amount": amount,
            "description": description,
            "status": "succeeded"  # –°—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π
        }
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {payment_id}, —Å—É–º–º–∞: {amount}, –æ–ø–∏—Å–∞–Ω–∏–µ: {description}")
        return payment_id, confirmation_url
    
    async def check_payment_status(self, payment_id: str) -> Optional[str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω—ã.
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            str: –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        payment = await get_payment(payment_id)
        
        if not payment:
            logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return None
            
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
        if payment.status == 'succeeded':
            logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment_id} —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å succeeded")
            return 'succeeded'
            
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, –∫–∞–∫ –±—É–¥—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ YooKassa
        time.sleep(0.5)
        
        # –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–º
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ
        payment = await update_payment_status(payment_id, 'succeeded')
        
        if payment:
            # –ù–∞—á–∏—Å–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
            if payment.tokens == -1:  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
                await set_unlimited_status(payment.user_id, True)
                logger.info(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {payment.user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
            else:
                await add_tokens(payment.user_id, payment.tokens)
                logger.info(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {payment.user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {payment.tokens} —Ç–æ–∫–µ–Ω–æ–≤")
        
        return 'succeeded'
    
    async def check_payment(self, payment_id: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.
        –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º–∏.
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        if payment_id not in self.payments:
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ —Å ID {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {"status": "not_found"}
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {payment_id}, —Å—Ç–∞—Ç—É—Å: succeeded")
        return {
            "id": payment_id,
            "status": "succeeded",
            "amount": self.payments[payment_id]["amount"],
            "description": self.payments[payment_id]["description"]
        }
    
    async def process_payment_notification(self, payment_data: Dict) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
        –í —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ —É—Å–ø–µ—à–Ω—ã–º–∏.
        
        Args:
            payment_data: –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        payment_id = payment_data.get('object', {}).get('id')
        if not payment_id:
            return False
        
        await self.check_payment_status(payment_id)
        return True
    
    async def cancel_payment(self, payment_id: str) -> Dict[str, Any]:
        """
        –ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ—Ç–º–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞, –Ω–æ —Ç–∞–∫ –∫–∞–∫ –ø–ª–∞—Ç–µ–∂–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ,
        —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å.
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
            
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
        """
        if payment_id not in self.payments:
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ —Å ID {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {"status": "not_found"}
        
        self.payments[payment_id]["status"] = "canceled"
        
        logger.info(f"–û—Ç–º–µ–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {payment_id}")
        return {
            "id": payment_id,
            "status": "canceled",
            "amount": self.payments[payment_id]["amount"],
            "description": self.payments[payment_id]["description"]
        }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
payment_service = FreePaymentService() 