import random
import asyncio
from typing import Optional

class MockAIAgent:
    """
    Мок-версия AI-агента для тестирования бота без реальных запросов
    """
    
    def __init__(self):
        # Предопределенные ответы на различные типы запросов
        self.greetings_responses = [
            "Здравствуйте! Как я могу вам помочь сегодня?",
            "Приветствую вас! Расскажите, что вас беспокоит?",
            "Добрый день! Я готов выслушать вас и помочь. С чего начнем?",
            "Рад нашей встрече! Что привело вас ко мне?"
        ]
        
        self.emotional_responses = [
            "Я вижу, что эта ситуация вызывает у вас сильные эмоции. Расскажите подробнее, что именно вас тревожит?",
            "Ваши чувства совершенно понятны и естественны в такой ситуации. Как давно вы испытываете эти переживания?",
            "Спасибо, что поделились своими эмоциями. Это важный шаг. Как вы думаете, что могло бы помочь вам почувствовать себя лучше?",
            "Я понимаю ваши чувства. Давайте подумаем вместе, какие шаги можно предпринять, чтобы облегчить эту эмоциональную нагрузку."
        ]
        
        self.solution_responses = [
            "На основе того, что вы рассказали, я могу предложить несколько стратегий. Во-первых, попробуйте...",
            "В вашей ситуации может помочь следующий подход: начните с малых шагов...",
            "Есть несколько проверенных техник, которые могут быть полезны в подобных случаях. Например...",
            "Я рекомендую обратить внимание на три аспекта: ваши мысли, физическое состояние и социальное окружение. Давайте рассмотрим каждый из них..."
        ]
        
        self.general_responses = [
            "Это интересный вопрос. Давайте разберемся в нем подробнее.",
            "Понимаю вашу позицию. Хотелось бы узнать больше о контексте этой ситуации.",
            "Спасибо, что поделились этим. Как вы сами оцениваете эту ситуацию?",
            "Ваш опыт очень ценен для понимания общей картины. Расскажите, как это влияет на другие сферы вашей жизни?"
        ]
    
    async def send_message(self, message: str) -> Optional[str]:
        """
        Имитация отправки сообщения AI-агенту и получения ответа
        """
        # Имитируем задержку ответа от 1 до 3 секунд
        delay = random.uniform(1, 3)
        await asyncio.sleep(delay)
        
        # Определяем тип запроса и выбираем соответствующий ответ
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["привет", "здравствуй", "добрый день", "здраствуй", "хай"]):
            response = random.choice(self.greetings_responses)
        elif any(word in message_lower for word in ["грустно", "страшно", "боюсь", "тревожно", "злюсь", "обидно"]):
            response = random.choice(self.emotional_responses)
        elif any(word in message_lower for word in ["что делать", "как быть", "помоги", "совет", "решить"]):
            response = random.choice(self.solution_responses)
        else:
            response = random.choice(self.general_responses)
        
        # Иногда добавляем вопрос для продолжения диалога
        if random.random() > 0.5:
            questions = [
                " Что вы думаете об этом?",
                " Как это звучит для вас?",
                " Есть ли какие-то аспекты, которые мы еще не обсудили?",
                " Как вы себя чувствуете, когда думаете об этом?"
            ]
            response += random.choice(questions)
        
        return response

# Создаем экземпляр для использования в других модулях
mock_ai_agent = MockAIAgent() 