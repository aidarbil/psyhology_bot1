import uuid
import logging
import traceback
import json
import sys
from typing import Dict, Optional, Tuple
from datetime import datetime

import config
from database.models import Payment
from database import create_payment, update_payment_status, add_tokens, set_unlimited_status

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
handler = logging.StreamHandler(sys.stdout)
handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)

# –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram Payments - —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–º
global TELEGRAM_PAYMENTS_AVAILABLE
global TELEGRAM_PAYMENTS_INITIALIZED
TELEGRAM_PAYMENTS_AVAILABLE = True
TELEGRAM_PAYMENTS_INITIALIZED = False

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
PROVIDER_TOKEN = config.TELEGRAM_PROVIDER_TOKEN

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not PROVIDER_TOKEN:
    logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ TELEGRAM_PROVIDER_TOKEN")
    TELEGRAM_PAYMENTS_INITIALIZED = False
else:
    logger.info(f"‚úÖ Telegram Payments –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {PROVIDER_TOKEN[:4]}...{PROVIDER_TOKEN[-4:] if len(PROVIDER_TOKEN) > 8 else ''}")
    TELEGRAM_PAYMENTS_INITIALIZED = True
    logger.debug(f"TELEGRAM_PAYMENTS_INITIALIZED —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {TELEGRAM_PAYMENTS_INITIALIZED}")

logger.info(f"–°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Payments: {TELEGRAM_PAYMENTS_INITIALIZED}")

class PaymentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π Telegram Payments"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ services/__init__.py
    TELEGRAM_PAYMENTS_INITIALIZED = TELEGRAM_PAYMENTS_INITIALIZED
    
    @staticmethod
    async def create_payment_link(user_id: int, tariff: str) -> Tuple[Optional[str], Optional[Payment]]:
        """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram Payments"""
        global TELEGRAM_PAYMENTS_INITIALIZED
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ create_payment_link: {TELEGRAM_PAYMENTS_INITIALIZED}")
        
        if not TELEGRAM_PAYMENTS_INITIALIZED:
            logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: Telegram Payments –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None, None
            
        if tariff not in config.TARIFFS:
            logger.error(f"‚ùå –¢–∞—Ä–∏—Ñ {tariff} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã: {list(config.TARIFFS.keys())}")
            return None, None
        
        tariff_data = config.TARIFFS[tariff]
        amount = tariff_data['price']
        tokens = tariff_data['tokens']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞
        if not isinstance(amount, (int, float)) or amount <= 0:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {amount}")
            return None, None
        
        payment_id = str(uuid.uuid4())
        
        # –î–ª—è Telegram Payments –Ω–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫—É, –∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –∏ –¥–∞–Ω–Ω—ã–µ
        # –í–º–µ—Å—Ç–æ URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º tariff:payment_id, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ show_payment_invoice
        
        logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∞—Ä–∏—Ñ: {tariff}")
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É
            payment = Payment(
                payment_id=payment_id,
                user_id=user_id,
                tariff=tariff,
                amount=amount,
                tokens=tokens,
                status='pending',
                created_at=datetime.now().isoformat()
            )
            await create_payment(payment)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –í–º–µ—Å—Ç–æ URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ "tariff:payment_id"
            return f"tariff:{tariff}:payment_id:{payment_id}", payment
        except Exception as e:
            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(traceback.format_exc())
            return None, None
    
    @staticmethod
    async def process_successful_payment(user_id: int, telegram_payment_id: str, tariff: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç Telegram"""
        logger.info(f"üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Telegram, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, –ø–ª–∞—Ç–µ–∂: {telegram_payment_id}")
        
        try:
            if tariff not in config.TARIFFS:
                logger.error(f"‚ùå –¢–∞—Ä–∏—Ñ {tariff} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False
                
            tariff_data = config.TARIFFS[tariff]
            tokens = tariff_data['tokens']
            amount = tariff_data['price']
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
            payment = Payment(
                payment_id=telegram_payment_id,
                user_id=user_id,
                tariff=tariff,
                amount=amount,
                tokens=tokens,
                status='succeeded',
                created_at=datetime.now().isoformat()
            )
            await create_payment(payment)
            
            # –ù–∞—á–∏—Å–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if tokens == -1:  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
                logger.info(f"üéâ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await set_unlimited_status(user_id, True)
            else:
                logger.info(f"üéâ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ {tokens} —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                await add_tokens(user_id, tokens)
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
            logger.error(traceback.format_exc())
            return False
    
    @staticmethod
    async def check_payment_status(payment_id: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ (–∑–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ –≤ Telegram Payments —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ pre_checkout_query –∏ successful_payment)"""
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
        logger.info("–í Telegram Payments —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫–∏")
        
        return "unknown"  # –í Telegram Payments –º—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
payment_service = PaymentService() 